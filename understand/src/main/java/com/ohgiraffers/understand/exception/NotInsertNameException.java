package com.ohgiraffers.understand.exception;

// 중복된 이름 발견시 날릴 용도
// 기존 메뉴에 중복된 이름이 있을 시 발생ㅅ시킬 인셉션
public class NotInsertNameException extends Exception{

    public NotInsertNameException(String message) {
        super(message);
    }
}

/*
* 1. 객체 지향 프로그래밍(OOP)
*  1-1) 클래스(Class) : 자바에서 클래스는 객체를 생성하기 위한 설계도이자 기본적인 구성 단위
*            클래스는 속성(필드) 과 행동(메서드) 을 정의하고, 이를 기반으로 객체를 생성하여 사용할 수 있다.
*  1-2) 객체(Object) : 클래스의 인스턴스로 구체적인 속성과 행동을 포함함
*  1-3) 상속 : 기존 클래스를 확장하여 새로운 클래스를 만드는 기능
*                 - 클래스가 다른 클래스의 속성과 메소드를 물려 받아 코드 재사용성을 높임
*  1-4) 캡슐화/추상화 : 객체의 속성과 메소드를 감추고 필요한 것만 외부에 공개하는 것을 의미
*                 - 불필요한 세부사항은 숨기고 중요한 부분만 노출하는 것으로, 코드의 유지보수성을 높임
*  1-5) 다형성() : 하나의 인터페이스로 여러가지 형태의 동작을 구현할 수 있다.
*                 - 같은 이름의 메소드가 다양한 동작을 하도록 하는 특징으로, 메소드 오버로딩과 오버라이딩이 해당함
*
* 2. 데이터 타입 및 변수
*  2-1) 기본 데이터 타입 : int, float, double, char, boolean 등
*  2-2) 참조 데이터 타입 : 객체를 가리키는 참조 타입으로 배열, 클래스, 인터페이스 등이 해당됨
*  2-3) 변수 선언과 초기화, 스코프(변수의 유효 범위) 에 대한 이헤
*
* 3. 제어문(Control Flow)
*  3-1) 조건문 : if, switch 를 사용해 프로그램의 흐름을 조건에 따라 제어함
*  3-2) 반복문 : for, while,e do-while 을 통해 반복 작업을 수행함
*  3-3) 예외처리 : try, catch, finally, throw 등을 통해 오류 상황을 처리하고, 프로그램이 비정상적으로 종료되지 않도록 함
*
* 4. 컬렉션 프레임워크
*  4-1) List, Set, Map 인터페이스와 이를 구현하는 클래스들(ArrayList, HashSet, HashMap)
*  4-2) 컬렉션을 효과적으로 사용하기 위해 제네릭을 사용하여 타입 안전성을 높일 수 있다.
* */
